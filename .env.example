# ==========================================
# ERP System - Environment Configuration Template
# ==========================================
# Copy this file to .env and update with your specific values
# ⚠️  Never commit .env to version control!

# ==========================================
# Environment Selection
# ==========================================
# Options: development, testing, production
ENVIRONMENT=development

# ==========================================
# Server Configuration  
# ==========================================
# Server host and port
SERVER_HOST=127.0.0.1
SERVER_PORT=3000
# Number of worker threads
SERVER_WORKERS=4

# ==========================================
# Database Configuration
# ==========================================
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://erp_admin:erp_secure_password_change_in_production@localhost:5432/erp_main

# Connection pool settings
DATABASE_MAX_CONNECTIONS=10
DATABASE_MIN_CONNECTIONS=2

# ==========================================
# Redis Configuration  
# ==========================================
# Redis connection string
# Format: redis://[:password@]host:port[/db]
REDIS_URL=redis://:redis_secure_password_change_in_production@localhost:6379

# Redis connection pool settings
REDIS_MAX_CONNECTIONS=10

# ==========================================
# JWT Security Configuration
# ==========================================
# JWT signing secret (MUST be at least 32 characters for production)
# Generate with: openssl rand -base64 32
JWT_SECRET=your-super-secret-jwt-key-change-in-production-min-32-chars

# Token expiry times (in seconds)
JWT_ACCESS_TOKEN_EXPIRY=3600     # 1 hour (development: 3600, production: 1800)
JWT_REFRESH_TOKEN_EXPIRY=2592000 # 30 days (development: 30d, production: 7d)

# ==========================================
# Security & Encryption
# ==========================================
# Argon2 password hashing parameters
ARGON2_MEMORY_COST=65536    # 64 MB (development: 32768, production: 131072)
ARGON2_TIME_COST=3          # Iterations (development: 2, production: 4)
ARGON2_PARALLELISM=2        # Threads (development: 1, production: 4)

# AES-GCM encryption key for sensitive data (MUST be exactly 32 characters)
# Generate with: openssl rand -base64 32 | cut -c1-32
AES_ENCRYPTION_KEY=your-32-char-encryption-key-here!

# ==========================================
# CORS Configuration
# ==========================================
# Comma-separated list of allowed origins
# Development: "*" for permissive access
# Production: Specific domains only, no wildcards!
CORS_ALLOWED_ORIGINS=http://localhost:3000,https://localhost:3000

# Comma-separated list of allowed HTTP methods  
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS

# Comma-separated list of allowed headers
CORS_ALLOWED_HEADERS=authorization,content-type,x-request-id,accept

# Whether to allow credentials (cookies, authorization headers)
CORS_ALLOW_CREDENTIALS=true

# Preflight cache duration in seconds
CORS_MAX_AGE=3600

# ==========================================
# Email Service Configuration
# ==========================================
# Email provider: mock, smtp, sendgrid, aws_ses
EMAIL_PROVIDER=mock

# SMTP Configuration (if using smtp provider)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_FROM_EMAIL=noreply@yourcompany.com
SMTP_FROM_NAME=ERP System
SMTP_USE_TLS=true
SMTP_USE_STARTTLS=true
SMTP_TIMEOUT_SECONDS=30
SMTP_MAX_RETRIES=3

# SendGrid Configuration (if using sendgrid provider)
SENDGRID_API_KEY=your-sendgrid-api-key

# AWS SES Configuration (if using aws_ses provider)  
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key

# ==========================================
# Rate Limiting
# ==========================================
# Rate limiting configuration
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST_SIZE=10

# ==========================================
# Application Settings
# ==========================================
# Company name for branding and emails
APP_COMPANY_NAME=Your Company Name

# Base URL for the application (used in emails and links)
APP_BASE_URL=http://localhost:3000

# Feature flags
APP_ENABLE_REGISTRATION=true
APP_ENABLE_2FA=true
APP_ENABLE_EMAIL_VERIFICATION=true

# ==========================================
# Monitoring & Metrics
# ==========================================
# Enable Prometheus metrics collection
METRICS_ENABLED=true

# Metrics server port
METRICS_PORT=9090

# Metrics endpoint path
METRICS_PATH=/metrics

# Metrics namespace for Prometheus
METRICS_NAMESPACE=erp_system

# ==========================================
# Logging Configuration
# ==========================================
# Log level: trace, debug, info, warn, error
LOG_LEVEL=info

# Rust logging configuration
# Adjust log levels for different components
RUST_LOG=info,erp_api=debug,erp_auth=debug,erp_core=debug,tower_http=info

# ==========================================
# Development & Debugging
# ==========================================
# Enable debug mode (development only)
DEBUG_MODE=true

# Enable SQL query logging (development only)
SQLX_LOGGING=true

# Enable request/response logging (development only)
HTTP_LOGGING=true

# ==========================================
# Production Security Notes
# ==========================================
# For PRODUCTION deployment, ensure:
# 1. Change ALL default passwords and secrets
# 2. Use strong, randomly generated secrets (min 32 chars)
# 3. Set CORS_ALLOWED_ORIGINS to specific domains (no wildcards)
# 4. Use managed database and Redis services
# 5. Enable TLS/HTTPS with reverse proxy
# 6. Set appropriate token expiry times (shorter for production)
# 7. Enable monitoring and alerting
# 8. Use environment-specific configurations
# 9. Regularly rotate secrets and keys
# 10. Enable audit logging and monitoring

# ==========================================
# Quick Setup Commands
# ==========================================
# 1. Copy this file: cp .env.example .env
# 2. Generate JWT secret: openssl rand -base64 32
# 3. Generate AES key: openssl rand -base64 32 | cut -c1-32
# 4. Start infrastructure: docker-compose up -d postgres redis
# 5. Run server: cargo run --bin erp-api
# 6. Test health: curl http://localhost:3000/health